---
import BaseLayout from '../layouts/BaseLayout.astro';
import resume from '../data/resume.json';
import projects from '../data/projects.json';

const timeline = resume.timeline ?? [];
const productSystems = resume.productSystems ?? [];
const tagCategoryLabels: Record<string, string> = {
  event: 'イベント種別',
  product: '担当プロダクト',
  skill: 'スキル',
  role: '役割',
  education: '学歴',
  award: '受賞',
  certification: '資格'
};
const displayedLegendCategories = new Set(['skill', 'role']);
const usedTagCategories = Array.from(
  new Set(
    timeline.flatMap((slot) =>
      slot.events?.flatMap((event) => event.tags?.map((tag) => tag.category) ?? []) ?? []
    )
  )
).filter((category) => displayedLegendCategories.has(category));

const toSlug = (value: string | undefined) =>
  (value ?? '')
    .toString()
    .trim()
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '');

const normalizeLabel = (label: string | undefined) => (label ?? '').trim();

const hasOrganizerRole = (label: string | undefined) =>
  /運営|主催|リード|リーダ|manager|lead|owner|facilitator|organizer|director/i.test(
    label ?? ''
  );

const normalizeKey = (value: string | undefined) => toSlug(value);

const projectSlugByLabel = new Map<string, string>();
projects.forEach((project) => {
  const key = normalizeKey(project.title);
  if (key) {
    projectSlugByLabel.set(key, project.slug);
  }
});

const projectLabelAliases: Record<string, string> = {
  dummy_ui_dashboard: 'dummy_analytics_dashboard',
  dummy_creator_ec: 'dummy_booking_platform',
  dummy_portfolio: 'dummy_photography_portfolio'
};

Object.entries(projectLabelAliases).forEach(([alias, target]) => {
  const slug = projectSlugByLabel.get(normalizeKey(target));
  if (slug) {
    projectSlugByLabel.set(normalizeKey(alias), slug);
  }
});

const productSystemSlugByLabel = new Map<string, string>();
productSystems.forEach((system) => {
  const key = normalizeKey(system.name);
  const slug = toSlug(system.name);
  if (key && slug) {
    productSystemSlugByLabel.set(key, slug);
  }
});

const productSystemAliases: Record<string, string> = {
  dummy_id_system: 'dummy_id_serverless'
};

Object.entries(productSystemAliases).forEach(([alias, target]) => {
  const slug = productSystemSlugByLabel.get(normalizeKey(target));
  if (slug) {
    productSystemSlugByLabel.set(normalizeKey(alias), slug);
  }
});

const buildEventName = (event: any) => {
  const tags = event?.tags ?? [];
  const findTag = (category: string) => tags.find((tag) => tag.category === category);
  const productTag = findTag('product');
  const certificationTag = findTag('certification');
  const awardTag = findTag('award');
  const educationTag = findTag('education');
  const eventTag = findTag('event');
  const roleTags = tags.filter((tag) => tag.category === 'role');
  const organizer = roleTags.some((tag) => hasOrganizerRole(tag.label));

  if (productTag) {
    const label = normalizeLabel(productTag.label);
    return label.endsWith('担当') ? label : `${label}担当`;
  }

  if (certificationTag) {
    const label = normalizeLabel(certificationTag.label);
    return label.endsWith('資格取得') ? label : `${label}資格取得`;
  }

  if (eventTag) {
    const label = normalizeLabel(eventTag.label);
    if (/勉強会/u.test(label)) {
      const suffix = organizer ? '運営' : '参加';
      return label.endsWith(suffix) ? label : `${label}${suffix}`;
    }
    if (/コンペ/u.test(label)) {
      const suffix = organizer ? '主催' : '参加';
      return label.endsWith(suffix) ? label : `${label}${suffix}`;
    }
    if (/プロジェクト/u.test(label)) {
      return label;
    }
    return label;
  }

  if (awardTag) {
    return normalizeLabel(awardTag.label);
  }

  if (educationTag) {
    return normalizeLabel(educationTag.label);
  }

  return normalizeLabel(event?.title ?? '活動');
};

const groupKeyMap = new Map<string, string>();
const timelineSlots = timeline.map((slot, index) => {
  const groupLabel = slot.group ?? `フェーズ${index + 1}`;
  if (!groupKeyMap.has(groupLabel)) {
    groupKeyMap.set(groupLabel, `group-${groupKeyMap.size}`);
  }
  const events = (slot.events ?? []).map((event) => {
    const tags = event?.tags ?? [];
    const skillTags = tags
      .filter((tag) => tag.category === 'skill')
      .map((tag) => normalizeLabel(tag.label))
      .filter(Boolean);
    const roleTags = tags
      .filter((tag) => tag.category === 'role')
      .map((tag) => normalizeLabel(tag.label))
      .filter(Boolean);
    const productTag = tags.find((tag) => tag.category === 'product');
    let targetHref: string | null = null;
    if (productTag) {
      const key = normalizeKey(productTag.label);
      const projectSlug = projectSlugByLabel.get(key);
      if (projectSlug) {
        targetHref = `/projects#${projectSlug}`;
      } else {
        const systemSlug = productSystemSlugByLabel.get(key);
        if (systemSlug) {
          targetHref = `/skills#product-${systemSlug}`;
        }
      }
    }
    return {
      ...event,
      displayName: buildEventName(event),
      period: normalizeLabel(event?.time) || normalizeLabel(slot.range),
      summary: normalizeLabel(event?.summary),
      skillTags,
      roleTags,
      targetHref
    };
  });
  return {
    ...slot,
    groupLabel,
    groupKey: groupKeyMap.get(groupLabel)!,
    events
  };
});

const groupFilters = Array.from(groupKeyMap.entries()).map(([label, key]) => ({
  key,
  label
}));
---

<BaseLayout title="Resume — yukassa" description="経歴・職務経験・学歴・資格をまとめたページ。">
  <article class="page">
    <header class="page__hero container">
      <p class="page__eyebrow">Resume</p>
      <h1>経験とキャリアのハイライト</h1>
      <p class="page__lead">{resume.summary}</p>
      <a class="download" href="#" role="button" aria-disabled="true">PDF をダウンロード（準備中）</a>
      <a class="skills-link" href="/skills">Skills ページはこちら</a>
    </header>

    <section class="section container timeline-section">
      <div class="section__header">
        <div>
          <h2>Timeline</h2>
          <p class="section__lead">
            業務・学術・コミュニティ活動を横軸に時間、縦軸にイベントとして整理しました。並行して走らせていたプロジェクトや勉強会も同じ期間内でスタック表示しています。
          </p>
        </div>
        {usedTagCategories.length > 0 && (
          <div class="timeline-legend" aria-label="タグ凡例">
            {usedTagCategories.map((category) => (
              <span class={`tag tag--legend tag--${category}`}>
                {tagCategoryLabels[category] ?? category}
              </span>
            ))}
          </div>
        )}
      </div>

      <div class="timeline-wrapper">
        {timelineSlots.length > 0 && (
          <div class="timeline-controls">
            <fieldset class="filter-group">
              <legend>フェーズで表示</legend>
              <div class="filter-buttons" role="radiogroup">
                <button
                  type="button"
                  class="filter-button is-active"
                  data-filter-type="group"
                  data-filter-value="all"
                  aria-pressed="true"
                >
                  すべて
                </button>
                {groupFilters.map((filter) => (
                  <button
                    type="button"
                    class="filter-button"
                    data-filter-type="group"
                    data-filter-value={filter.key}
                    aria-pressed="false"
                  >
                    {filter.label}
                  </button>
                ))}
              </div>
            </fieldset>
          </div>
        )}

        <div class="timeline-grid" role="list">
          {timelineSlots.map((slot) => (
            <section
              class="timeline-column"
              role="listitem"
              data-group-key={slot.groupKey}
            >
              <header class="timeline-column__header">
                <span class="timeline-column__label">{slot.label}</span>
                <h3>{slot.range}</h3>
              </header>
              <div class="timeline-column__events">
                {slot.events?.map((event) => {
                  const content = (
                    <>
                      <header>
                        <h4>{event.displayName}</h4>
                        {event.period && <p class="timeline-event__time">{event.period}</p>}
                      </header>
                      {event.summary && <p class="timeline-event__summary">{event.summary}</p>}
                      {(event.skillTags.length > 0 || event.roleTags.length > 0) && (
                        <div class="timeline-event__tag-groups">
                          {event.skillTags.length > 0 && (
                            <div class="timeline-event__tag-group" role="group" aria-label="スキルタグ">
                              <span class="timeline-event__tag-title">スキル</span>
                              <div class="timeline-event__tags" role="list">
                                {event.skillTags.map((label) => (
                                  <span class="tag tag--skill" role="listitem">{label}</span>
                                ))}
                              </div>
                            </div>
                          )}
                          {event.roleTags.length > 0 && (
                            <div class="timeline-event__tag-group" role="group" aria-label="役割タグ">
                              <span class="timeline-event__tag-title">役割</span>
                              <div class="timeline-event__tags" role="list">
                                {event.roleTags.map((label) => (
                                  <span class="tag tag--role" role="listitem">{label}</span>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </>
                  );

                  return event.targetHref ? (
                    <a class="timeline-event timeline-event--link" href={event.targetHref}>
                      {content}
                    </a>
                  ) : (
                    <article class="timeline-event">{content}</article>
                  );
                })}
              </div>
            </section>
          ))}
        </div>
      </div>
    </section>

  </article>
</BaseLayout>

<style>
  .page {
    display: flex;
    flex-direction: column;
    gap: clamp(3rem, 6vw, 4.5rem);
  }

  .page__hero {
    position: relative;
    padding: clamp(3.4rem, 9vw, 5.2rem) clamp(1.8rem, 6vw, 3.2rem) 0;
    display: grid;
    gap: clamp(1.85rem, 4vw, 2.6rem);
    overflow: hidden;
  }

  .page__hero::before,
  .page__hero::after {
    content: '';
    position: absolute;
    inset: 0;
    pointer-events: none;
  }

  .page__hero::before {
    background:
      radial-gradient(circle at 20% 30%, rgba(99, 102, 241, 0.28), transparent 60%),
      radial-gradient(circle at 85% 20%, rgba(192, 132, 252, 0.28), transparent 65%);
    mix-blend-mode: screen;
  }

  .page__hero::after {
    background-image:
      radial-gradient(circle at 30% 45%, rgba(148, 163, 255, 0.23) 1px, transparent 1px),
      radial-gradient(circle at 70% 65%, rgba(56, 189, 248, 0.23) 1px, transparent 1px);
    background-size: 220px 220px, 280px 280px;
    opacity: 0.55;
  }

  .page__hero > * {
    position: relative;
    z-index: 1;
  }

  .page__eyebrow {
    margin: 0;
    font-size: 0.82rem;
    letter-spacing: 0.14em;
    text-transform: uppercase;
    color: rgba(229, 231, 255, 0.85);
  }

  .page__lead {
    margin: 0;
    max-width: 760px;
    color: rgba(214, 218, 255, 0.8);
  }

  .download {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.85rem 1.9rem;
    border-radius: 999px;
    background: var(--accent);
    color: #0d0b21;
    text-decoration: none;
    font-weight: 600;
    box-shadow: 0 24px 38px rgba(192, 132, 252, 0.32);
    transition: transform 0.2s ease;
  }

  .download:hover,
  .download:focus-visible {
    transform: translateY(-3px);
  }

  .download[aria-disabled='true'] {
    opacity: 0.7;
    pointer-events: none;
  }

  .skills-link {
    display: inline-flex;
    align-items: center;
    gap: 0.45rem;
    margin-top: 0.5rem;
    color: rgba(173, 216, 255, 0.92);
    font-weight: 600;
    text-decoration: none;
  }

  .skills-link::after {
    content: '↗';
    font-size: 0.9em;
  }

  .skills-link:hover,
  .skills-link:focus {
    color: var(--accent);
  }

  .section {
    display: grid;
    gap: clamp(1.85rem, 4vw, 2.6rem);
  }

  .timeline-section {
    position: relative;
    padding: clamp(3.2rem, 7vw, 4.6rem) clamp(1.8rem, 6vw, 3.2rem);
    --timeline-grid-padding: clamp(1.6rem, 5vw, 3.2rem);
  }

  .timeline-section::before {
    content: '';
    position: absolute;
    inset: clamp(0.6rem, 2vw, 1.2rem);
    border-radius: clamp(2.8rem, 9vw, 4.8rem);
    background:
      linear-gradient(140deg, rgba(16, 20, 58, 0.94), rgba(10, 13, 40, 0.94)),
      radial-gradient(circle at 20% 20%, rgba(192, 132, 252, 0.18), transparent 60%);
    background-blend-mode: screen;
    z-index: -1;
  }

  .timeline-section .section__header {
    display: flex;
    justify-content: space-between;
    gap: clamp(1.6rem, 4vw, 2.6rem);
    flex-wrap: wrap;
    align-items: flex-start;
  }

  .section__lead {
    margin: 0;
    max-width: 640px;
    color: rgba(210, 214, 251, 0.75);
  }

  .timeline-legend {
    display: flex;
    flex-wrap: wrap;
    gap: 0.55rem;
  }

  .timeline-wrapper {
    position: relative;
    overflow-x: auto;
    padding-bottom: 1rem;
    margin: 0;
  }

  .timeline-wrapper::-webkit-scrollbar {
    height: 8px;
  }

  .timeline-wrapper::-webkit-scrollbar-thumb {
    background: rgba(124, 113, 185, 0.4);
    border-radius: 999px;
  }

  .timeline-controls {
    display: grid;
    gap: clamp(1.35rem, 3vw, 1.95rem);
    margin-bottom: clamp(1.6rem, 4vw, 2.4rem);
  }

  .filter-group {
    border: 1px solid rgba(124, 113, 185, 0.35);
    border-radius: var(--radius-lg);
    padding: clamp(1.05rem, 3vw, 1.4rem);
    background: rgba(21, 26, 62, 0.8);
    backdrop-filter: blur(8px);
  }

  .filter-group legend {
    padding: 0 0.45rem;
    font-size: 0.78rem;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    color: rgba(173, 177, 233, 0.7);
  }

  .filter-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 0.65rem;
    margin: 0;
    padding: 0.45rem 0 0;
  }

  .filter-button {
    border: 1px solid rgba(124, 113, 185, 0.32);
    background: rgba(18, 22, 53, 0.6);
    color: rgba(218, 222, 255, 0.78);
    border-radius: 999px;
    padding: 0.48rem 1.1rem;
    font-weight: 600;
    font-size: 0.88rem;
    cursor: pointer;
    transition: border-color 0.2s ease, color 0.2s ease, background 0.2s ease, transform 0.2s ease;
  }

  .filter-button:hover,
  .filter-button:focus-visible {
    border-color: rgba(56, 189, 248, 0.55);
    color: #f8fafc;
    transform: translateY(-2px);
  }

  .filter-button.is-active {
    background: rgba(56, 189, 248, 0.18);
    border-color: rgba(56, 189, 248, 0.45);
    color: var(--accent);
  }

  .timeline-grid {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: minmax(260px, 1fr);
    gap: clamp(1.85rem, 4vw, 2.8rem);
    padding: 0 var(--timeline-grid-padding);
    position: relative;
  }

  .timeline-grid::before {
    content: '';
    position: absolute;
    top: 1.75rem;
    left: var(--timeline-grid-padding);
    right: var(--timeline-grid-padding);
    height: 2px;
    background: linear-gradient(90deg, rgba(124, 113, 185, 0.35), rgba(56, 189, 248, 0.25));
  }

  .timeline-column {
    display: grid;
    gap: clamp(1.35rem, 3vw, 1.95rem);
    position: relative;
  }

  .timeline-column.is-hidden {
    display: none;
  }

  .timeline-column::before {
    content: '';
    position: absolute;
    top: 1.75rem;
    left: 0.45rem;
    width: 11px;
    height: 11px;
    border-radius: 50%;
    background: var(--accent);
    box-shadow: 0 0 0 6px rgba(56, 189, 248, 0.18);
  }

  .timeline-column__header {
    padding-top: 0.55rem;
    display: grid;
    gap: 0.3rem;
    margin-left: 1.35rem;
  }

  .timeline-column__label {
    font-size: 0.8rem;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    color: rgba(173, 177, 233, 0.7);
  }

  .timeline-column__header h3 {
    margin: 0;
    font-size: 1.18rem;
  }

  .timeline-column__events {
    display: grid;
    gap: clamp(1.05rem, 2.6vw, 1.6rem);
    padding-left: 1.35rem;
  }

  .timeline-event {
    position: relative;
    border-radius: var(--radius-lg);
    padding: clamp(1.45rem, 3.4vw, 1.95rem);
    border: 1px solid rgba(124, 113, 185, 0.32);
    background: rgba(23, 28, 64, 0.92);
    display: grid;
    gap: 0.85rem;
    overflow: hidden;
    transition: transform 0.2s ease, border-color 0.2s ease;
  }

  .timeline-event::after {
    content: '';
    position: absolute;
    inset: 0;
    background-image: radial-gradient(circle, rgba(192, 132, 252, 0.16) 0.8px, transparent 1px);
    background-size: 120px 120px;
    opacity: 0.4;
    pointer-events: none;
  }

  .timeline-event > * {
    position: relative;
    z-index: 1;
  }

  .timeline-event--link {
    text-decoration: none;
    color: inherit;
  }

  .timeline-event--link:hover,
  .timeline-event--link:focus-visible {
    border-color: rgba(56, 189, 248, 0.45);
    transform: translate3d(0, -2px, 0);
  }

  .timeline-event header {
    display: grid;
    gap: 0.3rem;
  }

  .timeline-event h4 {
    margin: 0;
    font-size: 1.08rem;
  }

  .timeline-event__time {
    margin: 0;
    color: rgba(173, 177, 233, 0.75);
    font-size: 0.86rem;
    font-variant-numeric: tabular-nums;
  }

  .timeline-event__summary {
    margin: 0;
    color: rgba(214, 218, 255, 0.78);
    line-height: 1.6;
  }

  .timeline-event__tag-groups {
    display: grid;
    gap: 0.8rem;
  }

  .timeline-event__tag-group {
    display: grid;
    gap: 0.4rem;
  }

  .timeline-event__tag-title {
    margin: 0;
    font-size: 0.75rem;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    color: rgba(173, 177, 233, 0.7);
  }

  .timeline-event__tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.48rem;
  }

  .tag {
    display: inline-flex;
    align-items: center;
    gap: 0.35rem;
    padding: 0.32rem 0.78rem;
    border-radius: 999px;
    font-size: 0.8rem;
    font-weight: 600;
    border: 1px solid transparent;
    letter-spacing: 0.01em;
  }

  .tag--legend {
    background: rgba(21, 26, 62, 0.8);
    border-color: rgba(124, 113, 185, 0.32);
    color: rgba(210, 214, 251, 0.75);
  }

  .tag--event {
    background: rgba(56, 189, 248, 0.22);
    border-color: rgba(56, 189, 248, 0.35);
    color: rgba(195, 245, 255, 0.95);
  }

  .tag--product {
    background: rgba(59, 130, 246, 0.22);
    border-color: rgba(59, 130, 246, 0.35);
    color: rgba(210, 227, 255, 0.9);
  }

  .tag--skill {
    background: rgba(129, 140, 248, 0.24);
    border-color: rgba(129, 140, 248, 0.38);
    color: rgba(229, 232, 255, 0.92);
  }

  .tag--role {
    background: rgba(251, 191, 36, 0.24);
    border-color: rgba(251, 191, 36, 0.42);
    color: rgba(252, 231, 146, 0.92);
  }

  .tag--education {
    background: rgba(16, 185, 129, 0.26);
    border-color: rgba(16, 185, 129, 0.42);
    color: rgba(190, 250, 218, 0.9);
  }

  .tag--award {
    background: rgba(244, 114, 182, 0.26);
    border-color: rgba(244, 114, 182, 0.42);
    color: rgba(255, 222, 239, 0.92);
  }

  .tag--certification {
    background: rgba(74, 222, 128, 0.26);
    border-color: rgba(74, 222, 128, 0.42);
    color: rgba(210, 255, 230, 0.9);
  }

  @media (max-width: 960px) {
    .timeline-grid {
      grid-auto-columns: minmax(240px, 1fr);
    }
  }

  @media (max-width: 720px) {
    .page__hero {
      padding: clamp(2.8rem, 10vw, 3.6rem) clamp(1.2rem, 7vw, 1.8rem) 0;
    }

    .timeline-section {
      padding: clamp(2.6rem, 9vw, 3.2rem) clamp(1.2rem, 7vw, 1.8rem);
      --timeline-grid-padding: clamp(1.1rem, 6vw, 1.8rem);
    }

    .timeline-section::before {
      inset: clamp(0.4rem, 4vw, 0.8rem);
      border-radius: clamp(1.8rem, 12vw, 3.4rem);
    }

    .timeline-controls {
      gap: 1.15rem;
    }
  }

  @media (max-width: 640px) {
    .timeline-grid::before {
      top: 1.55rem;
    }

    .timeline-column::before {
      top: 1.55rem;
    }

    .timeline-column__events {
      padding-left: 1.05rem;
    }
  }
</style>

<script>
  // @ts-nocheck
  (() => {
    const buttons = Array.from(document.querySelectorAll('[data-filter-type="group"]'));
    const columns = Array.from(document.querySelectorAll('.timeline-column'));
    let activeGroup = 'all';

    const setActive = (value) => {
      buttons.forEach((node) => {
        if (!(node instanceof HTMLButtonElement)) return;
        const isActive = node.dataset.filterValue === value;
        node.classList.toggle('is-active', isActive);
        node.setAttribute('aria-pressed', String(isActive));
      });
    };

    const applyFilters = () => {
      columns.forEach((node) => {
        if (!(node instanceof HTMLElement)) return;
        const groupKey = node.dataset.groupKey;
        const matchesGroup = activeGroup === 'all' || activeGroup === groupKey;
        node.classList.toggle('is-hidden', !matchesGroup);
      });
    };

    buttons.forEach((node) => {
      if (!(node instanceof HTMLButtonElement)) return;
      node.addEventListener('click', () => {
        const { filterValue } = node.dataset;
        if (!filterValue) return;

        activeGroup = activeGroup === filterValue ? 'all' : filterValue;
        setActive(activeGroup);
        applyFilters();
      });
    });

    setActive(activeGroup);
    applyFilters();
  })();
</script>
